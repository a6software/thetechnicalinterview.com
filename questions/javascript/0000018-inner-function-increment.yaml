---
title: "Inner function incrementor"
question: |
  What will the following code output?
  
  ```js
  function outer() {
    let count = 0;
    return function inner() {
    count++;
    return count;
    }
  }
  
  let myCounter = outer();
  myCounter();
  myCounter();
  console.log(myCounter());
  ```
possible_answers:
  - "1"
  - "2"
  - "3"
  - "`undefined`"
correct_answers:
  - "3"
explanation: |
  In this example, the outer function returns the inner function as a closure. When the outer function is invoked, it creates a new variable `count` with a value of `0`. The inner function, when invoked, has access to this variable and can update its value.
  When `myCounter` is assigned the return value of the outer function, it is assigned the inner function. Invoking `myCounter()` three times increments the count variable by 1 each time. The final `console.log(myCounter())` call logs the final value of count, which is 3.
tags:
  - javascript
  - closure
  - inner function
credit:
  - Generated by ChatGPT
