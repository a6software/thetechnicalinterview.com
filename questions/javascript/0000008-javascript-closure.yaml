---
title: JavaScript variable hoisting
question: |
  What is the behavior of variables declared with the `var` keyword in JavaScript when it comes to hoisting?
hint: |
  Hoisting refers to how variables are handled by the JavaScript interpreter when they are declared.
possible_answers:
- "The variable is initialized with a value of `undefined` and can be accessed before it is declared in the code."
- "The variable is not accessible before it is declared in the code."
- "The variable is accessible and initialized with its value before it is declared in the code."
- "The variable is accessible and initialized with `null` before it is declared in the code."

correct_answers:
- "The variable is initialized with a value of `undefined` and can be accessed before it is declared in the code."

explanation: |
  Variables declared with the `var` keyword in JavaScript are hoisted to the top of their scope, which means they are initialized with a value of `undefined` and can be accessed before they are declared in the code. However, the value of the variable is not set until the variable is actually declared in the code.

tags:
- javascript
- variables
- hoisting

credit:
  - https://developer.mozilla.org/en-US/docs/Glossary/Hoisting
  - "Generated by ChatGPT"
